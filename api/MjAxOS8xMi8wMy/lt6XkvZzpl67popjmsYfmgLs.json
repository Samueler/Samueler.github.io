{"title":"工作问题汇总","date":"2019-12-03T07:39:29.056Z","link":"2019/12/03/工作问题汇总","comments":true,"updated":"2019-12-19T02:31:59.870Z","content":"<h1 id=\"Troubles\">Troubles<a href=\"2019/12/03/工作问题汇总#Troubles\"></a></h1><p><strong>1.MBProgressHUD</strong></p>\n<p>版本号：0.9</p>\n<p>问题：hud实例不正常remove的问题</p>\n<p>分析：</p>\n<p>a.加载到UIApplication.shareApplication.keyWindow上存在隐患</p>\n<p>原因：keywindow可能会被改变，例如弹出系统弹窗时，此时keyWindow为系统弹窗的window</p>\n<p>解决方案：避免添加hud到keyWindow上。而应添加至APPDelegate的widow上。</p>\n<p>b.连续添加多个hud，并连续移除多个hud时使用移除动画。</p>\n<p>分析：连续添加多个hud，移除时使用动画，会触发源代码中NSObject类的cancelPreviousPerformRequestsWithTarget:selector:object:方法，导致即将需要移除的hud移除失败。</p>\n<p>解决方案：连续创建hud并移除时，不使用动画，或者直接升级版本只1.0.0以及以上版本，1.0.0后的版本移除这一做法。</p>\n<p><strong>2.YYLabel</strong></p>\n<p>问题：YYLabel使用YYLayout计算labl的高度，设置label的属性时，在XR上造成绘图（因为YYLabel显示的内容是生成image并将其赋值给对应view的layer的contents属性）模糊，但在IphoneX以下机型不明显，个人猜测受分辨率影响。</p>\n<p>分析：通过打印YYLabel的API计算出的label的宽高，以及使用autoLayout计算出来的宽高，发现两者之间存在像素偏差，<a href>原因暂未知</a></p>\n<p>解决方案：重新计算label文本的实际宽高，并设置frame，或者使用autoLayout布局，让label自适应宽高。不使用YYLayout计算出的宽高进行赋值</p>\n<p><strong>3.Xcode Debug/Release</strong></p>\n<p>问题：Debug和Release环境下，NSNumber强转BOOL值表现不一致。<br>例如：</p>\n<pre><code>- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    [self transform:@(NO)];\n}\n\n- (void)transform:(BOOL)value {\n    NSLog(@&quot;%d&quot;, value);\n}</code></pre><p>在Release情况下，value的值为YES，在Debug模式下，value的值为NO。</p>\n<p>解决方案：传入对应数据类型，不进行强转，调用boolValue。</p>\n<p><strong>4.CLGeocoder（地址反编码）</strong><br>问题：开启定位权限，进行定位，在代理方法<code>locationManager:didUpdateLocations:</code>中使用CLGeocoder直接进行地址反编码，编码报错<code>Error Domain=kCLErrorDomain Code=2 &quot;(null)&quot;</code>。</p>\n<pre><code>CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];\nCLGeocodeCompletionHandler handle = ^(NSArray *placemarks,NSError *error) {\n    if (error) {\n        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(locationAddressDictionary:error:)]) {\n              [self.delegate locationAddressDictionary:nil error:error];\n            }\n        }\n\n    for (CLPlacemark *placeMark in placemarks) {\n            NSDictionary *addressDic = placeMark.addressDictionary;\n\n        if (self.locationAddressDictionary) {\n            self.locationAddressDictionary(addressDic, error);\n        }\n    }\n};\n\n[clGeoCoder reverseGeocodeLocation:location completionHandler:handle];</code></pre><p>问题分析:查看方法<code>reverseGeocodeLocation: completionHandler:</code>方法描述时发现，该请求不能在短时间内多次请求，否则会报错。</p>\n<p>After initiating a reverse-geocoding request, do not attempt to initiate another reverse- or forward-geocoding request. Geocoding requests are rate-limited for each app, so making too many requests in a short period of time may cause some of the requests to fail. When the maximum rate is exceeded, the geocoder passes an error object with the value kCLErrorNetwork to your completion handler.</p>\n<p>解决方案：使用标记位，判断回调回来时，是否正在进行反编码，如果在反编码则不调用<code>reverseGeocodeLocation: completionHandler:</code>方法.</p>\n<pre><code>if (!self.isReverseGeocoding) {\n   self.isReverseGeocoding = YES;\n   CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];\n   CLGeocodeCompletionHandler handle = ^(NSArray *placemarks,NSError *error) {\n   self.isReverseGeocoding = NO;\n   if (error) {\n      if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(locationAddressDictionary:error:)]) {\n            [self.delegate locationAddressDictionary:nil error:error];\n      }\n   }\n\n   for (CLPlacemark *placeMark in placemarks) {\n       NSDictionary *addressDic = placeMark.addressDictionary;\n\n       if (self.locationAddressDictionary) {\n            self.locationAddressDictionary(addressDic, error);\n       }\n   };\n\n// 短时间内不能重复请求，否则会报错\n[clGeoCoder reverseGeocodeLocation:location completionHandler:handle];</code></pre><p><strong>5.阿里百川SDK（AlibcTradeSDK）</strong></p>\n<p>版本号：4.0.0.2</p>\n<p>问题：启动APP触发[AppMonitorTaskPool start]: attempt to start the thread again。导致启动即闪退。</p>\n<p>分析与解决方案：</p>\n<p>1.更换新的已经修改改bug的SDK。（但是，我们咨询阿里相关开发，该问题他们已经知悉，但是需要下版本进行修复，但修复时间与自己项目发布时间不一致，因此只能项目中自己避免该问题)</p>\n<p>2.咨询过阿里的同学知道这是<code>AppMonitorTaskPool</code>是继承自<code>NSThread</code>。因此可以判断出，造成闪退的原因是因为同一线程多次调用<code>start</code>方法引起。因此，可以通过hook掉<code>NSThread</code>的start方法，并添加计数器，判断调用<code>start</code>方法的次数是否大于等于1，如果大于等于1次，那么进行拦截，否则，正常调用<code>start</code>方法。在<code>cancel</code>方法中，如果计数器的值大于等于1，那么调用<code>cancel</code>方法时，将计数器减1.</p>\n<pre><code>- (void)mm_start{\n    Class clsseee = NSClassFromString(@&quot;AppMonitorTaskPool&quot;);\n    if ([self isKindOfClass:clsseee]) {\n        if (self.hookCount&gt;=1) {\n        return;\n        }\n    }\n    if ([self isKindOfClass:clsseee]) {\n        self.hookCount++;\n    }\n    [self mm_start];\n}</code></pre>","prev":{"title":"RunLoop源码解析","link":"2019/12/03/RunLoop源码解析"},"next":{"title":"读《Objective-C高级编程-iOS与OS-X多线程和内存管理》之Blocks总结记录","link":"2019/12/03/读《Objective-C高级编程-iOS与OS-X多线程和内存管理》之Blocks总结记录"},"plink":"https://samueler.github.io/2019/12/03/工作问题汇总/","toc":[{"title":"Troubles","id":"Troubles","index":"1"}]}