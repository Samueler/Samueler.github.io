{"title":"iOS组件化-资源管理","date":"2019-12-17T04:07:08.258Z","link":"2019/12/17/iOS组件化-资源管理","comments":true,"updated":"2019-12-18T03:28:43.901Z","content":"<p>在组件化前期的工作中，我们会面临如何管理图片、音视频等资源的问题。我们需要关注的问题是如何将相应的资源和组件一起打包，并保证能够在组件内和组件间的正常使用。以下内容均针对于使用<code>Pod</code>方式组件化对资源文件管理的讨论。</p>\n<h4 id=\"文件管理方式：\">文件管理方式：<a href=\"2019/12/17/iOS组件化-资源管理#文件管理方式：\"></a></h4><h5 id=\"1-集中式管理\">1. 集中式管理<a href=\"2019/12/17/iOS组件化-资源管理#1-集中式管理\"></a></h5><p>将所有的资源文件做成一个组件，其它相应的组件依赖该资源组件，通过组件暴露的相关接口获取对应的资源。</p>\n<h5 id=\"2-分散式管理\">2.    分散式管理<a href=\"2019/12/17/iOS组件化-资源管理#2-分散式管理\"></a></h5><p>将资源文件进行清晰分类，对应的资源文件嵌入至对应的组件中，如有共用文件，抽取公共资源组件将公共资源放入该组件中，或者将公共资源直接放至主工程中。</p>\n<h5 id=\"集中式管理与分散式管理优缺点对比：\">集中式管理与分散式管理优缺点对比：<a href=\"2019/12/17/iOS组件化-资源管理#集中式管理与分散式管理优缺点对比：\"></a></h5><img src=\"/2019/12/17/iOS组件化-资源管理/1.png\" class=\"article-img\">\n\n<h5 id=\"总结建议：\">总结建议：<a href=\"2019/12/17/iOS组件化-资源管理#总结建议：\"></a></h5><p>集中式管理可方便维护，可对项目文件进行统一管理，此外还可降低文件冗余的概率，可用于较大、耦合严重的项目。倘若是新项目或者组件对主工程依赖性不强的组件，可采用分散式管理，将组件的相关资源与组件绑定。</p>\n<h3 id=\"resources和resource-bundles\">resources和resource_bundles<a href=\"2019/12/17/iOS组件化-资源管理#resources和resource-bundles\"></a></h3><h3 id=\"图片文件（bundle-xcassets-、-bundle）\">图片文件（bundle + xcassets 、 bundle）<a href=\"2019/12/17/iOS组件化-资源管理#图片文件（bundle-xcassets-、-bundle）\"></a></h3><h3 id=\"Xib文件\">Xib文件<a href=\"2019/12/17/iOS组件化-资源管理#Xib文件\"></a></h3><h3 id=\"组件内\">组件内<a href=\"2019/12/17/iOS组件化-资源管理#组件内\"></a></h3><h3 id=\"组件间\">组件间<a href=\"2019/12/17/iOS组件化-资源管理#组件间\"></a></h3><h3 id=\"总结\">总结<a href=\"2019/12/17/iOS组件化-资源管理#总结\"></a></h3>","next":{"title":"Xcode10以及Xcode11缺少libstdc-6dylib报错的解决方案","link":"2019/12/03/Xcode10以及Xcode11缺少libstdc-6dylib报错的解决方案"},"plink":"http://yoursite.com/2019/12/17/iOS组件化-资源管理/"}