{"title":"iOS组件化-资源管理","date":"2019-12-17T04:07:08.258Z","link":"2019/12/17/iOS组件化-资源管理","comments":true,"updated":"2019-12-18T04:21:11.965Z","content":"<p>在组件化前期的工作中，我们会面临如何管理图片、音视频等资源的问题。我们需要关注的问题是如何将相应的资源和组件一起打包，并保证能够在组件内和组件间的正常使用。以下内容均针对于使用<code>CocoaPods</code>方式组件化对资源文件管理的讨论。</p>\n<h4 id=\"文件管理方式：\">文件管理方式：<a href=\"2019/12/17/iOS组件化-资源管理#文件管理方式：\"></a></h4><h5 id=\"1-集中式管理\">1. 集中式管理<a href=\"2019/12/17/iOS组件化-资源管理#1-集中式管理\"></a></h5><p>将所有的资源文件做成一个组件，其它相应的组件依赖该资源组件，通过组件暴露的相关接口获取对应的资源。</p>\n<h5 id=\"2-分散式管理\">2.    分散式管理<a href=\"2019/12/17/iOS组件化-资源管理#2-分散式管理\"></a></h5><p>将资源文件进行清晰分类，对应的资源文件嵌入至对应的组件中，如有共用文件，抽取公共资源组件将公共资源放入该组件中，或者将公共资源直接放至主工程中。</p>\n<h5 id=\"集中式管理与分散式管理优缺点对比：\">集中式管理与分散式管理优缺点对比：<a href=\"2019/12/17/iOS组件化-资源管理#集中式管理与分散式管理优缺点对比：\"></a></h5><img src=\"/2019/12/17/iOS组件化-资源管理/1.png\" class=\"article-img\">\n\n<h5 id=\"总结建议：\">总结建议：<a href=\"2019/12/17/iOS组件化-资源管理#总结建议：\"></a></h5><p>集中式管理可方便维护，可对项目文件进行统一管理，此外还可降低文件冗余的概率，可用于较大、耦合严重的项目。倘若是新项目或者组件对主工程依赖性不强的组件，可采用分散式管理，将组件的相关资源与组件绑定。</p>\n<h3 id=\"resources和resource-bundles\"><code>resources</code>和<code>resource_bundles</code><a href=\"2019/12/17/iOS组件化-资源管理#resources和resource-bundles\"></a></h3><p><code>resoures</code>和<code>resource_bundles</code>是<code>CocoaPods</code>两种资源文件引用的方式。</p>\n<h4 id=\"1-resource-resources\">1. <code>resource/resources</code><a href=\"2019/12/17/iOS组件化-资源管理#1-resource-resources\"></a></h4><p><code>resource</code>与<code>resources</code>两个属性功能相同，不同的是<code>resources</code>可以批量指定文件资源，<code>resource</code>只能指定单个文件资源。</p>\n<h5 id=\"2-语法\">2. 语法<a href=\"2019/12/17/iOS组件化-资源管理#2-语法\"></a></h5><pre><code>spec.resource = &apos;Resources/HockeySDK.bundle&apos;\nspec.resources = [&apos;Images/*.png&apos;, &apos;Sounds/*&apos;]</code></pre><h5 id=\"3-官方描述-Podspec语法官方介绍\">3. 官方描述 <a href=\"https://guides.cocoapods.org/syntax/podspec.html#resources\" target=\"_blank\" rel=\"noopener\"><code>Podspec语法官方介绍</code></a><a href=\"2019/12/17/iOS组件化-资源管理#3-官方描述-Podspec语法官方介绍\"></a></h5><p><code>resources</code>将指定的资源复制到目标<code>bundle</code>，我们强烈建议开发者使用 <code>resource bundles</code>去构建静态资源库。使用<code>resources</code>属性仅仅是将指定的文件资源复制到目标<code>bundle</code>，如此<code>Xcode</code>不会对相关资源进行优化操作。</p>\n<p>看完官方描述，我们第一直觉就会放弃使用这种方式了。虽然如此，但是我们还是去看看如果使用这种方式具体会产生哪些影响。</p>\n<p>使用<code>pod lib create SCResource_Resources</code>命令创建项目。打开<code>Example</code>中的项目，并删除<code>SCResource_Resources.podspec</code>中无用的代码。如下图所示。</p>\n<img src=\"/2019/12/17/iOS组件化-资源管理/2.png\" class=\"article-img\">\n\n<p>选中<code>ReplaceMe.m</code>文件，右键<code>Show in Finder</code>,调至上一级文件夹，看到<code>Classes</code>和<code>Assets</code>文件夹。我们把<code>ReplaceMe.m</code>删除，并删除<code>SCResource_Resources.podspec</code>中的<code>s.source_files</code>,因为我们在资源组件中暂时不用编辑代码。然后把事先准备好的图片资源放入<code>Assets</code>文件夹下,并设置<code>resource</code>属性。最终如下图所示。</p>\n<img src=\"/2019/12/17/iOS组件化-资源管理/3.png\" class=\"article-img\">\n\n<p>终端<code>pod install</code>后，便可以看到图片资源已经被加到<code>Resources</code>文件夹下。</p>\n<img src=\"/2019/12/17/iOS组件化-资源管理/3.png\" class=\"article-img\">\n\n\n\n\n<h3 id=\"图片文件（bundle-xcassets-、-bundle）\">图片文件（bundle + xcassets 、 bundle）<a href=\"2019/12/17/iOS组件化-资源管理#图片文件（bundle-xcassets-、-bundle）\"></a></h3><h3 id=\"Xib文件\">Xib文件<a href=\"2019/12/17/iOS组件化-资源管理#Xib文件\"></a></h3><h3 id=\"组件内\">组件内<a href=\"2019/12/17/iOS组件化-资源管理#组件内\"></a></h3><h3 id=\"组件间\">组件间<a href=\"2019/12/17/iOS组件化-资源管理#组件间\"></a></h3><h3 id=\"总结\">总结<a href=\"2019/12/17/iOS组件化-资源管理#总结\"></a></h3>","next":{"title":"Xcode10以及Xcode11缺少libstdc-6dylib报错的解决方案","link":"2019/12/03/Xcode10以及Xcode11缺少libstdc-6dylib报错的解决方案"},"plink":"http://yoursite.com/2019/12/17/iOS组件化-资源管理/"}