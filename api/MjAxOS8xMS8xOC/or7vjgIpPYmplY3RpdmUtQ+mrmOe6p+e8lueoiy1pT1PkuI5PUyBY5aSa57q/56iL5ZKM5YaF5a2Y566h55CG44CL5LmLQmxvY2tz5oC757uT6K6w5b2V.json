{"title":"读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录","date":"2019-11-18T03:00:35.727Z","link":"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录","comments":true,"updated":"2019-12-03T02:53:47.310Z","content":"<h3 id=\"相关基础知识简介\">相关基础知识简介<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#相关基础知识简介\"></a></h3><h4 id=\"A-函数指针\">A. 函数指针<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#A-函数指针\"></a></h4><h5 id=\"1-函数指针：存储函数地址的指针变量。\">1. 函数指针：存储函数地址的指针变量。<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#1-函数指针：存储函数地址的指针变量。\"></a></h5><h5 id=\"2-函数指针的定义：\">2. 函数指针的定义：<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#2-函数指针的定义：\"></a></h5><p><code>函数返回值类型 (* 指针变量名)(函数参数列表)</code></p>\n<h5 id=\"3-函数指针的简单使用：\">3. 函数指针的简单使用：<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-函数指针的简单使用：\"></a></h5><pre><code>int max(int a, int b);\n\nint main(int argc, const char * argv[]) {\n    // 定义函数指针\n    int (*maxPtr)(int, int) = max;\n    // 通过函数指针调用函数\n    printf(&quot;%d\\n&quot;, maxPtr(3, 5));\n\n    return 0;\n}\n\nint max(int a, int b) {\n    return a &gt; b ? a : b;\n}</code></pre><h4 id=\"B-结构体\">B. 结构体<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#B-结构体\"></a></h4><h5 id=\"1-结构体的定义\">1. 结构体的定义:<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#1-结构体的定义\"></a></h5><pre><code>struct 结构体名 {\n    结构体成员\n};</code></pre><h5 id=\"2-结构体变量\">2. 结构体变量:<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#2-结构体变量\"></a></h5><pre><code>struct Student {\n    char *name;\n    int num;\n    int age;\n    float score;\n} student1, student2;</code></pre><h5 id=\"3-成员赋值\">3.    成员赋值<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-成员赋值\"></a></h5><h6 id=\"3-1-对成员进行逐一赋值\">3.1 对成员进行逐一赋值<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-1-对成员进行逐一赋值\"></a></h6><pre><code>student1.name = &quot;Tom&quot;\nstudent1.num = 12;\nstudent1.age = 16;\nstudent.score = 98.5;\n\nstudent2.name = &quot;jerry&quot;\nstudent2.num = 13;\nstudent2.age = 16;\nstudent2.score = 99;</code></pre><h6 id=\"3-2-定义时整体赋值\">3.2 定义时整体赋值<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-2-定义时整体赋值\"></a></h6><pre><code>struct Student {\n    char *name;\n    int num;\n    int age;\n    float score;\n} student1 = {&quot;tom&quot;, 12, 16, 98.5};</code></pre><h6 id=\"3-3-C-中的构造函数之一\">3.3 C++中的构造函数之一:<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-3-C-中的构造函数之一\"></a></h6><pre><code>struct Student {\n    char *name;\n    int num;\n    int age;\n    float score;\n    Student(char *_name, int _num, int _age, float _score) : name(_name), num(_num), age(_age), score(_score) {\n\n    }\n};</code></pre><h6 id=\"3-4-结构体变量创建和访问对象：\">3.4 结构体变量创建和访问对象：<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-4-结构体变量创建和访问对象：\"></a></h6><pre><code>Student s1 = Student(&quot;Tom&quot;, 12, 16, 95.0);\nstd::cout &lt;&lt; s1.name &lt;&lt; &quot;\\n&quot; &lt;&lt; s1.num &lt;&lt; &quot;\\n&quot; &lt;&lt; s1.age &lt;&lt; &quot;\\n&quot; &lt;&lt; s1.score &lt;&lt; std::endl;</code></pre><h4 id=\"C-结构体指针\">C. 结构体指针<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#C-结构体指针\"></a></h4><h5 id=\"1-定义-指向结构体的指针\">1. 定义:指向结构体的指针<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#1-定义-指向结构体的指针\"></a></h5><h5 id=\"2-定义形式\">2. 定义形式:<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#2-定义形式\"></a></h5><p><code>struct 结构体名 *变量名</code></p>\n<h5 id=\"3-简单使用\">3. 简单使用:<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-简单使用\"></a></h5><pre><code>struct Student {\n   char *name;\n   int num;\n   int age;\n   float score;\n   Student(char *_name, int _num, int _age, float _score) : name(_name), num(_num), age(_age), score(_score) {\n\n   }\n };\n\nStudent s1 = Student(&quot;Tom&quot;, 12, 16, 98.5);\nstruct Student *studentPtr = &amp;s1;\nstd::cout &lt;&lt; (*studentPtr).name &lt;&lt; std::endl;\nstd::cout &lt;&lt; (*studentPtr).num &lt;&lt; std::endl;\nstd::cout &lt;&lt; (*studentPtr).age &lt;&lt; std::endl;\nstd::cout &lt;&lt; (*studentPtr).score &lt;&lt; std::endl;\n\nstd::cout &lt;&lt; &quot;-------------------&quot; &lt;&lt; std::endl;\n\nstd::cout &lt;&lt; studentPtr -&gt; name &lt;&lt; std::endl;\nstd::cout &lt;&lt; studentPtr -&gt; num &lt;&lt; std::endl;\nstd::cout &lt;&lt; studentPtr -&gt; age &lt;&lt; std::endl;\nstd::cout &lt;&lt; studentPtr -&gt; score &lt;&lt; std::endl;</code></pre><h3 id=\"Blocks基本用法简介：\">Blocks基本用法简介：<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#Blocks基本用法简介：\"></a></h3><h4 id=\"A-什么是Blocks：\">A. 什么是Blocks：<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#A-什么是Blocks：\"></a></h4><p>Blocks是带有自动变量（局部变量）的匿名函数</p>\n<h4 id=\"B-Block语法\">B. Block语法<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#B-Block语法\"></a></h4><p><code>^ 返回值类型 参数列表 表达式</code></p>\n<p>例如：</p>\n<pre><code>^void(int a) {\n    printf(&quot;%d&quot;, a);\n}</code></pre><h5 id=\"1-省略形式-省略返回值类型\">1. 省略形式:省略返回值类型<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#1-省略形式-省略返回值类型\"></a></h5><pre><code>`^参数列表 表达式`\n\n    ^(int a) {\n        printf(&quot;%d&quot;, a);\n    }\n\n省略返回值类型时，当表达式中无return语句，那么省略的返回值类型是void，如果表达式中有return语句，那么省略的返回值类型为return语句返回的类型，如果表达式中有多个return语句，那么必须保证所有return语句的返回值类型都相同。</code></pre><h5 id=\"2-省略形式：省略返回值类型和参数列表\">2. 省略形式：省略返回值类型和参数列表<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#2-省略形式：省略返回值类型和参数列表\"></a></h5><pre><code>`^表达式`\n\n如果不使用参数，那么可以将参数列表省略，例如：\n\n    ^void(void) {\n        printf(&quot;Block\\n&quot;);\n    }\n\n省略调返回值和参数列表后，代码如下：\n\n    ^{\n        printf(&quot;Block\\n&quot;);\n    }</code></pre><h4 id=\"C-Block类型变量\">C. Block类型变量<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#C-Block类型变量\"></a></h4><h5 id=\"1-声明Block类型变量：\">1. 声明Block类型变量：<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#1-声明Block类型变量：\"></a></h5><pre><code>`返回值类型 (^变量名称) (参数列表)`\n\n例如：\n\n    int (^blk)(int);</code></pre><h5 id=\"2-C语言函数声明、函数指针声明、Block类型变量声明类比\">2. C语言函数声明、函数指针声明、Block类型变量声明类比:<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#2-C语言函数声明、函数指针声明、Block类型变量声明类比\"></a></h5><p>|  C语言函数声明   | C语言函数指针声明  | Block变量声明 |<br>|  :—-:  | :—-:  | :—-: | :—-: |<br>| <code>返回值类型 函数名 参数列表</code>  | <code>返回值类型 (*指针变量名) 参数列表</code> | <code>返回值类型 (^block变量名) 参数列表</code>  |</p>\n<h5 id=\"3-赋值\">3.赋值<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#3-赋值\"></a></h5><pre><code>int (^blk)(int) = ^(int count) {\n    return count++;\n};</code></pre><h5 id=\"4-作为函数的参数\">4.作为函数的参数<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#4-作为函数的参数\"></a></h5><pre><code>void func(int (^blk)(int)) {\n\n}</code></pre><h5 id=\"5-作为函数的返回值\">5.作为函数的返回值<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#5-作为函数的返回值\"></a></h5><pre><code>int(^func()(int)) {\n    return ^(int count) {\n        return count++;\n    };\n}</code></pre><h5 id=\"6-使用typedef简化写法\">6.使用<code>typedef</code>简化写法<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#6-使用typedef简化写法\"></a></h5><p><code>typedef int (^blk_t)(int)</code></p>\n<h6 id=\"6-1-作为函数的参数\">6.1 作为函数的参数<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#6-1-作为函数的参数\"></a></h6><pre><code>void func(blk_t blk) {\n\n}</code></pre><h6 id=\"6-2-作为函数的返回值\">6.2 作为函数的返回值<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#6-2-作为函数的返回值\"></a></h6><pre><code>blk_t func() {\n\n}</code></pre><h5 id=\"7-调用Block变量\">7. 调用<code>Block</code>变量<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#7-调用Block变量\"></a></h5><pre><code>int(^blk)(int) = ^(int count) {\n    return count++;\n};\n\nint result =  blk(10);</code></pre><h4 id=\"D-block说明符在block中修改自动变量\">D. <code>__block</code>说明符在block中修改自动变量<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#D-block说明符在block中修改自动变量\"></a></h4><pre><code>__block int val = 10;\nvoid(^blk)(void) = ^{\n    val++;\n};\n\nblk();\nprintf(&quot;val:%d, val&quot;);</code></pre><h3 id=\"Blocks的实现\">Blocks的实现<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#Blocks的实现\"></a></h3>","next":{"title":"Xcode10以及Xcode11缺少libstdc++.6dylib报错的解决方案","link":"2019/11/07/Xcode10以及Xcode11缺少libstdc++.6dylib报错的解决方案"},"plink":"http://yoursite.com/2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录/"}