{"title":"读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录","date":"2019-11-18T03:00:35.727Z","link":"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录","comments":true,"updated":"2019-12-02T07:55:54.817Z","content":"<h4 id=\"相关基础知识简介\">相关基础知识简介<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#相关基础知识简介\"></a></h4><h5 id=\"函数指针\"><code>函数指针</code><a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#函数指针\"></a></h5><p>1.函数指针：</p>\n<p>存储函数地址的指针变量。</p>\n<p>2.函数指针的定义：</p>\n<p><code>函数返回值类型 (* 指针变量名)(函数参数列表)</code></p>\n<p>3.函数指针的简单使用：</p>\n<pre><code>int max(int a, int b);\n\nint main(int argc, const char * argv[]) {\n    // 定义函数指针\n    int (*maxPtr)(int, int) = max;\n    // 通过函数指针调用函数\n    printf(&quot;%d\\n&quot;, maxPtr(3, 5));\n\n    return 0;\n}\n\nint max(int a, int b) {\n    return a &gt; b ? a : b;\n}</code></pre><h5 id=\"结构体\"><code>结构体</code><a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#结构体\"></a></h5><p>1.结构体的定义:</p>\n<pre><code>struct 结构体名 {\n    结构体成员\n};</code></pre><p>2.结构体变量:</p>\n<pre><code>struct Student {\n    char *name;\n    int num;\n    int age;\n    float score;\n} student1, student2;</code></pre><p>3.成员赋值</p>\n<p>1.对成员进行逐一赋值</p>\n<pre><code>student1.name = &quot;Tom&quot;\nstudent1.num = 12;\nstudent1.age = 16;\nstudent.score = 98.5;\n\nstudent2.name = &quot;jerry&quot;\nstudent2.num = 13;\nstudent2.age = 16;\nstudent2.score = 99;</code></pre><p>2.定义时整体赋值</p>\n<pre><code>struct Student {\n    char *name;\n    int num;\n    int age;\n    float score;\n} student1 = {&quot;tom&quot;, 12, 16, 98.5};</code></pre><p>3.C++中的构造函数之一:</p>\n<pre><code>struct Student {\n    char *name;\n    int num;\n    int age;\n    float score;\n    Student(char *_name, int _num, int _age, float _score) : name(_name), num(_num), age(_age), score(_score) {\n\n    }\n};</code></pre><p>结构体变量创建和访问对象：</p>\n<pre><code>Student s1 = Student(&quot;Tom&quot;, 12, 16, 95.0);\nstd::cout &lt;&lt; s1.name &lt;&lt; &quot;\\n&quot; &lt;&lt; s1.num &lt;&lt; &quot;\\n&quot; &lt;&lt; s1.age &lt;&lt; &quot;\\n&quot; &lt;&lt; s1.score &lt;&lt; std::endl;</code></pre><h5 id=\"结构体指针\"><code>结构体指针</code><a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#结构体指针\"></a></h5><p>a.定义:指向结构体的指针</p>\n<p>b.定义形式:</p>\n<p><code>struct 结构体名 *变量名</code></p>\n<p>c.简单使用:</p>\n<pre><code>  struct Student {\n    char *name;\n    int num;\n    int age;\n    float score;\n    Student(char *_name, int _num, int _age, float _score) : name(_name), num(_num), age(_age), score(_score) {\n\n    }\n};\n\nStudent s1 = Student(&quot;Tom&quot;, 12, 16, 98.5);\nstruct Student *studentPtr = &amp;s1;\nstd::cout &lt;&lt; (*studentPtr).name &lt;&lt; std::endl;\nstd::cout &lt;&lt; (*studentPtr).num &lt;&lt; std::endl;\nstd::cout &lt;&lt; (*studentPtr).age &lt;&lt; std::endl;\nstd::cout &lt;&lt; (*studentPtr).score &lt;&lt; std::endl;\n\nstd::cout &lt;&lt; &quot;-------------------&quot; &lt;&lt; std::endl;\n\nstd::cout &lt;&lt; studentPtr -&gt; name &lt;&lt; std::endl;\nstd::cout &lt;&lt; studentPtr -&gt; num &lt;&lt; std::endl;\nstd::cout &lt;&lt; studentPtr -&gt; age &lt;&lt; std::endl;\nstd::cout &lt;&lt; studentPtr -&gt; score &lt;&lt; std::endl;</code></pre><h4 id=\"Blocks基本用法简介：\">Blocks基本用法简介：<a href=\"2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录#Blocks基本用法简介：\"></a></h4><p>什么是Blocks：</p>\n<p>Blocks是带有自动变量（局部变量）的匿名函数</p>\n","next":{"title":"Xcode10以及Xcode11缺少libstdc++.6dylib报错的解决方案","link":"2019/11/07/Xcode10以及Xcode11缺少libstdc++.6dylib报错的解决方案"},"plink":"http://yoursite.com/2019/11/18/读《Objective-C高级编程-iOS与OS X多线程和内存管理》之Blocks总结记录/"}